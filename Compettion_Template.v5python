#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
Vasen_Etu = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)
Vasen_Yla = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)
Vasen_Taka = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)
Oikea_Etu = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
Oikea_Yla = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)
Oikea_Taka = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)
Puimuri = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)
digital_out_a = DigitalOut(brain.three_wire_port.a)
digital_out_b = DigitalOut(brain.three_wire_port.b)
bumper_manager = Bumper(brain.three_wire_port.c)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:
#	Author:
#	Created:
#	Configuration:
# 
# ------------------------------------------

# Library imports
from vex import *

# Begin project code

def pre_autonomous():
    # actions to do when the program starts
    brain.screen.clear_screen()
    brain.screen.print("pre auton code")
    wait(1, SECONDS)

def autonomous():

    looppaaja = True

    while looppaaja = True():

        if bumper_manager.pressing():
            
            Puolustus = True

            Vasen_Etu.spin_for(FORWARD, 90, DEGREES)
            Vasen_Yla.spin_for(FORWARD, 90, DEGREES)
            Vasen_Taka.spin_for(FORWARD, 90, DEGREES)

            looppaaja = False

        else:

            Puolustus = False

            Oikea_Etu.spin_for(FORWARD, 90, DEGREES)
            Oikea_Yla.spin_for(FORWARD, 90, DEGREES)
            Oikea_Taka.spin_for(FORWARD, 90, DEGREES)

            looppaaja = False

    brain.screen.clear_screen()
    brain.screen.set_cursor(0,20)
    brain.screen.print("autonomous code")

    Oikea_Etu.set_velocity(50, PERCENT)
    Oikea_Yla.set_velocity(50, PERCENT)
    Oikea_Taka.set_velocity(50, PERCENT)
            
    Vasen_Etu.set_velocity(50, PERCENT)     
    Vasen_Yla.set_velocity(50, PERCENT)
    Vasen_Taka.set_velocity(50, PERCENT)

    Oikea_Etu.spin_for(FORWARD, 720, DEGREES)
    Oikea_Yla.spin_for(FORWARD, 720, DEGREES)
    Oikea_Taka.spin_for(FORWARD, 720, DEGREES)

    Vasen_Etu.spin_for(FORWARD, 720, DEGREES)
    Vasen_Yla.spin_for(FORWARD, 720, DEGREES)
    Vasen_Taka.spin_for(FORWARD, 720, DEGREES)

def user_control():
    
    looppaaja = False
    digital_out_a.set(True)
    digital_out_b.set(True)
    brain.screen.clear_screen()
    StaattinenAkku = brain.battery.capacity()
    brain.screen.set_font(FontType.MONO20);

    brain.screen.set_cursor(1,20)
    brain.screen.print(brain.battery.capacity())
    brain.screen.print(" Prosenttia")

    while True:

        if StaattinenAkku == brain.battery.capacity():
            {}

        #Akun näkyminen näytöllä ja sen muuttujen asettaminen

        else:

            if (StaattinenAkku < 25):
                brain.screen.set_pen_color(Color.RED)

            if (StaattinenAkku < 75):
                brain.screen.set_pen_color(Color.YELLOW)

            if (StaattinenAkku > 75):
                brain.screen.set_pen_color(Color.GREEN)

            brain.screen.clear_screen()
            brain.screen.set_cursor(1,20)
            brain.screen.print(brain.battery.capacity())
            brain.screen.print(" Prosenttia")
            StaattinenAkku = brain.battery.capacity()

        #Ajamis koodi sekä moottoreiden nopeuden asettaminen

        Oikea_Etu.spin(FORWARD)
        Oikea_Yla.spin(FORWARD)
        Oikea_Taka.spin(FORWARD)

        Vasen_Etu.spin(FORWARD)
        Vasen_Yla.spin(FORWARD)
        Vasen_Taka.spin(FORWARD)

        Oikea_Etu.set_velocity(controller_1.axis2.position(), PERCENT)

        Oikea_Yla.set_velocity(controller_1.axis2.position(), PERCENT)

        Oikea_Taka.set_velocity(controller_1.axis2.position(), PERCENT)
            
        Vasen_Etu.set_velocity(controller_1.axis3.position(), PERCENT)
            
        Vasen_Yla.set_velocity(controller_1.axis3.position(), PERCENT)

        Vasen_Taka.set_velocity(controller_1.axis3.position(), PERCENT)

        if controller_1.buttonR1.pressing():

            digital_out_a.set(False)
            digital_out_b.set(False)

        if controller_1.buttonR2.pressing():

            digital_out_a.set(True)
            digital_out_b.set(True)

        if controller_1.buttonL1.pressing():

            Puimuri.spin(FORWARD)

        if controller_1.buttonL2.pressing():
            
            Puimuri.spin(REVERSE)

        wait(20, MSEC)

# create competition instance
comp = Competition(user_control, autonomous)
pre_autonomous()
