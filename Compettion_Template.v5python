#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
Vasen_Etu = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)
Vasen_Yla = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)
Vasen_Taka = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)
Oikea_Etu = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
Oikea_Yla = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)
Oikea_Taka = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)
Etu_Koura = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:
#	Author:
#	Created:
#	Configuration:
# 
# ------------------------------------------

# Library imports
from vex import *

# Begin project code

def pre_autonomous():
    # actions to do when the program starts
    brain.screen.clear_screen()
    brain.screen.print("pre auton code")
    wait(1, SECONDS)

def autonomous():
    brain.screen.clear_screen()
    brain.screen.set_cursor(0,20)
    brain.screen.print("autonomous code")
    # place automonous code here

def user_control():
    brain.screen.clear_screen()
    StaattinenAkku = brain.battery.capacity()
    brain.screen.set_font(FontType.MONO20);

    brain.screen.set_cursor(1,20)
    brain.screen.print(brain.battery.capacity())
    brain.screen.print(" Prosenttia")
    while True:

        if StaattinenAkku == brain.battery.capacity():
            {}

        else:
            brain.screen.clear_screen()
            brain.screen.set_cursor(1,20)
            brain.screen.print(brain.battery.capacity())
            brain.screen.print(" Prosenttia")
            StaattinenAkku = brain.battery.capacity()

        Motor_Setter = (controller_1.axis2.position)

        Oikea_Etu.spin(FORWARD)
        Oikea_Yla.spin(FORWARD)
        Oikea_Taka.spin(FORWARD)

        Vasen_Etu.spin(FORWARD)
        Vasen_Yla.spin(FORWARD)
        Vasen_Taka.spin(FORWARD)

        Oikea_Etu.set_velocity(controller_1.axis2.position(), PERCENT)

        Oikea_Yla.set_velocity(controller_1.axis2.position(), PERCENT)

        Oikea_Taka.set_velocity(controller_1.axis2.position(), PERCENT)
            
        Vasen_Etu.set_velocity(controller_1.axis3.position(), PERCENT)
            
        Vasen_Yla.set_velocity(controller_1.axis3.position(), PERCENT)

        Vasen_Taka.set_velocity(controller_1.axis3.position(), PERCENT)

        if (controller_1.buttonL1.pressing()):

            Etu_Koura.spin(FORWARD)

        else:

            Etu_Koura.stop()

        if (controller_1.buttonR1.pressing()):

            Etu_Koura.spin(REVERSE)

        wait(20, MSEC)

# create competition instance
comp = Competition(user_control, autonomous)
pre_autonomous()
