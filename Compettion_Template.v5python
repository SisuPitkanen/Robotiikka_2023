#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
Vasen_Etu = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)
Vasen_Yla = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)
Vasen_Taka = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)
Oikea_Etu = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)
Oikea_Yla = Motor(Ports.PORT13, GearSetting.RATIO_18_1, True)
Oikea_Taka = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)
Oikea_Siipi = DigitalOut(brain.three_wire_port.a)
Vasen_Siipi = DigitalOut(brain.three_wire_port.b)
bumper_manager = Bumper(brain.three_wire_port.h)
Linko_1 = Motor(Ports.PORT15, GearSetting.RATIO_18_1, True)
Linko_2 = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ----------------------------------------
# 
#        Project: Competation Template v5 Robotics Year(2023-2024)
#        Author: Sisu Pitkänen
#        Created: Sometime
#        Configuration: Something
# 
# ------------------------------------------

# Library imports
from vex import *

# Begin project code

def pre_autonomous():
    # actions to do when the program starts
    brain.screen.clear_screen()
    brain.screen.print("pre auton code")
    wait(1, SECONDS)

def autonomous():

    Oikea_Etu.set_velocity(50, PERCENT)
    Oikea_Yla.set_velocity(50, PERCENT)
    Oikea_Taka.set_velocity(50, PERCENT)

    Vasen_Etu.set_velocity(50, PERCENT)
    Vasen_Yla.set_velocity(50, PERCENT)
    Vasen_Taka.set_velocity(50, PERCENT)

    wait(1, SECONDS)

    Oikea_Etu.spin_for(FORWARD, 5, TURNS)
    Oikea_Yla.spin_for(FORWARD, 5, TURNS)
    Oikea_Taka.spin_for(FORWARD, 5, TURNS)

    Vasen_Etu.spin_for(FORWARD, 5, TURNS)
    Vasen_Yla.spin_for(FORWARD, 5, TURNS)
    Vasen_Taka.spin_for(FORWARD, 5, TURNS)

def user_control():

    Linko_1.set_max_torque(100, PERCENT)
    Linko_2.set_max_torque(100, PERCENT)
    Oikea_Siipi.set(True)
    Vasen_Siipi.set(True)
    brain.screen.clear_screen
    StaattinenAkku = brain.battery.capacity()
    brain.screen.set_font(FontType.MONO20);

    brain.screen.set_cursor(1,20)
    brain.screen.print(brain.battery.capacity())
    brain.screen.print(" Prosenttia")

    while True:

        if StaattinenAkku == brain.battery.capacity():
            ()

        #Akun näkyminen näytöllä ja sen muuttujen asettaminen

        else:

            if (StaattinenAkku < 25):

                brain.screen.set_pen_color(Color.RED)

            if (StaattinenAkku < 75):

                brain.screen.set_pen_color(Color.YELLOW)

            if (StaattinenAkku > 75):

                brain.screen.set_pen_color(Color.GREEN)

            brain.screen.clear_screen()
            brain.screen.set_cursor(1,20)
            brain.screen.print(brain.battery.capacity())
            brain.screen.print(" Prosenttia")
            StaattinenAkku = brain.battery.capacity()

            #Ajamis koodi sekä moottoreiden nopeuden asettaminen

        Oikea_Etu.spin(FORWARD)
        Oikea_Yla.spin(FORWARD)
        Oikea_Taka.spin(FORWARD)
        Vasen_Etu.spin(FORWARD)
        Vasen_Yla.spin(FORWARD)
        Vasen_Taka.spin(FORWARD)

        Oikea_Puoli_Velocity = (controller_1.axis4.position() * -1)

        Oikea_Etu.set_velocity(Oikea_Puoli_Velocity + controller_1.axis3.position(), PERCENT)

        Oikea_Yla.set_velocity(Oikea_Puoli_Velocity + controller_1.axis3.position(), PERCENT)

        Oikea_Taka.set_velocity(Oikea_Puoli_Velocity + controller_1.axis3.position(), PERCENT)

        Vasen_Etu.set_velocity(controller_1.axis4.position() + controller_1.axis3.position(), PERCENT)

        Vasen_Yla.set_velocity(controller_1.axis4.position() + controller_1.axis3.position(), PERCENT)

        Vasen_Taka.set_velocity(controller_1.axis4.position() + controller_1.axis3.position(), PERCENT)

        Linko_1.set_velocity(50, PERCENT)
        Linko_2.set_velocity(50, PERCENT)

        #Kaikki nappi systeemit, siivet, linko ja kourat

        if controller_1.buttonR1.pressing():

            Oikea_Siipi.set(False)
            Vasen_Siipi.set(False)

        if controller_1.buttonR2.pressing():

            Oikea_Siipi.set(True)
            Vasen_Siipi.set(True)

        if controller_1.buttonA.pressing():

            Linko_1.spin(FORWARD)
            Linko_2.spin(FORWARD)
        
        if controller_1.buttonB.pressing():

            Linko_1.stop()
            Linko_2.stop()

        wait(20, MSEC)

# create competition instance
comp = Competition(user_control, autonomous)
pre_autonomous()
